use lalrpop_util::ParseError;

use super::syntax;
use super::lex;
use types;
use expr;

grammar;

pub Ident: syntax::Ident = {
    <name: Name> <collision_id: ("#" <UInt>)?> => {
        syntax::Ident {
            name,
            collision_id: collision_id.unwrap_or(0),
        }
    },
};

TypeParam: syntax::TypeParam = {
    <ident: Ident> => {
        syntax::TypeParam {
            ident,
        }
    },
};

AtomicType: syntax::Type = {
    "(" <Type> ")",
    "(" ")" => syntax::Type::Unit,
    <ident: Ident> => syntax::Type::Var { ident },
};

AppType: syntax::Type = {
    <AtomicType>,

    <constructor: AppType> <param: AtomicType> => {
        syntax::Type::App {
            constructor: Box::new(constructor),
            param: Box::new(param),
        }
    },

    "equiv" <orig: AtomicType> <dest: AtomicType> => {
        syntax::Type::Equiv {
            orig: Box::new(orig),
            dest: Box::new(dest),
        }
    },

    "size" <ty: AtomicType> => {
        syntax::Type::Size {
            ty: Box::new(ty),
        }
    }
};

Quantifier: types::Quantifier = {
    "exists" => types::Quantifier::Exists,
    "forall" => types::Quantifier::ForAll,
};

PhasedArg: (types::Phase, syntax::Type) = {
    <arg: AppType> => (types::Phase::Dynamic, arg),
    "(" "static" <arg: Type> ")" => (types::Phase::Static, arg),
};

PhasedRet: (types::Phase, syntax::Type) = {
    <ret: AppType> => (types::Phase::Dynamic, ret),
    "static" <ret: AppType> => (types::Phase::Static, ret),
};

QuantifiedType: syntax::Type = {
    <AppType>,

    <quantifier: Quantifier> <params: ("{" <TypeParam> "}")+> <body: QuantifiedType> => {
        let mut result = body;
        for param in params.into_iter().rev() {
            result = syntax::Type::Quantified {
                quantifier,
                param,
                body: Box::new(result),
            };
        }
        result
    },

    <phased_arg: PhasedArg> "->" <phased_ret: PhasedRet> => {
        let (arg_phase, arg) = phased_arg;
        let (ret_phase, ret) = phased_ret;
        syntax::Type::Func {
            arg: Box::new(arg),
            arg_phase,
            ret: Box::new(ret),
            ret_phase,
        }
    },
};

PairType: syntax::Type = {
    <QuantifiedType> ","?,
    <left: QuantifiedType> "," <right: PairType> => {
        syntax::Type::Pair {
            left: Box::new(left),
            right: Box::new(right),
        }
    },
};

pub Type: syntax::Type = {
    <PairType>,
};

Intrinsic: expr::Intrinsic = {
    "refl_equiv" => expr::Intrinsic::ReflEquiv,
};

AtomicExpr: syntax::Expr = {
    "(" <Expr> ")",

    "(" ")" => syntax::Expr::Unit,

    <ident: Ident> => {
        syntax::Expr::Var {
            usage: expr::VarUsage::Copy,
            ident,
        }
    },

    "move" <ident: Ident> => {
        syntax::Expr::Var {
            usage: expr::VarUsage::Move,
            ident,
        }
    },

    <callee: CallableExpr> "(" <arg: Expr> ")" => {
        syntax::Expr::App {
            callee: Box::new(callee),
            arg: Box::new(arg),
        }
    },

    <intrinsic: Intrinsic> => {
        syntax::Expr::Intrinsic {
            intrinsic,
        }
    },
};

InstExpr: syntax::Expr = {
    <receiver: AtomicExpr> <type_params: ("{" <Type> "}")+> => {
        syntax::Expr::Inst {
            receiver: Box::new(receiver),
            type_params,
        }
    },
};

CallableExpr: syntax::Expr = {
    <AtomicExpr>,
    <InstExpr>,
};

BlockExpr: syntax::Expr = {
    <CallableExpr>,

    "forall" <type_params: ("{" <TypeParam> "}")+> <body: BlockExpr> => {
        syntax::Expr::ForAll {
            type_params,
            body: Box::new(body),
        }
    },

    "func" "(" <phase: "static"?> <arg_name: Ident> ":" <arg_type: Type> ")" "->" <body: BlockExpr> => {
        syntax::Expr::Func {
            arg_name,
            arg_type,
            arg_phase: match phase {
                None => types::Phase::Dynamic,
                Some(_) => types::Phase::Static,
            },
            body: Box::new(body),
        }
    },

    "let" <names: (<Ident> ",")*> <last_name: Ident?> "=" <val: Expr>
    "in" <body: BlockExpr> =>? {
        let mut all_names = names;
        if let Some(last_name) = last_name {
            all_names.push(last_name);
        }
        if all_names.len() > 0 {
            Ok(syntax::Expr::Let {
                names: all_names,
                val: Box::new(val),
                body: Box::new(body),
            })
        } else {
            Err(ParseError::User { error: lex::Error::Empty })
        }
    },

    "let_exists"
    <type_names: ("{" <Ident> "}")+>
    <val_name: Ident> "=" <val: Expr>
    "in" <body: BlockExpr> => {
        syntax::Expr::LetExists {
            type_names: type_names,
            val_name,
            val: Box::new(val),
            body: Box::new(body),
        }
    },

    "make_exists"
    <params: ("{" <Ident> "=" <Type> "}")+>
    <type_body: Type>
    "of" <body: BlockExpr> => {
        syntax::Expr::MakeExists {
            params: params,
            type_body,
            body: Box::new(body),
        }
    },

    "cast" "{" <param: TypeParam> "}" <type_body: Type>
    "by" <equivalence: Expr>
    "of" <body: BlockExpr> => {
        syntax::Expr::Cast {
            param,
            type_body,
            equivalence: Box::new(equivalence),
            body: Box::new(body),
        }
    }
};

PairExpr: syntax::Expr = {
    <BlockExpr> ","?,

    <left: BlockExpr> "," <right: PairExpr> => {
        syntax::Expr::Pair {
            left: Box::new(left),
            right: Box::new(right),
        }
    },
};

pub Expr: syntax::Expr = {
    <PairExpr>,
};

extern {
    type Location = usize;
    type Error = lex::Error;

    enum lex::Token {
        Name => lex::Token::Name(<String>),
        UInt => lex::Token::UInt(<u64>),

        "move" => lex::Token::KeyMove,
        "func" => lex::Token::KeyFunc,
        "let" => lex::Token::KeyLet,
        "let_exists" => lex::Token::KeyLetExists,
        "in" => lex::Token::KeyIn,
        "make_exists" => lex::Token::KeyMakeExists,
        "of" => lex::Token::KeyOf,
        "cast" => lex::Token::KeyCast,
        "by" => lex::Token::KeyBy,
        "refl_equiv" => lex::Token::KeyReflEquiv,

        "forall" => lex::Token::KeyForall,
        "exists" => lex::Token::KeyExists,
        "equiv" => lex::Token::KeyEquiv,
        "size" => lex::Token::KeySize,
        "static" => lex::Token::KeyStatic,

        "#" => lex::Token::NumSign,
        "," => lex::Token::Comma,
        ";" => lex::Token::Semicolon,
        "=" => lex::Token::Equals,
        ":" => lex::Token::Colon,
        "*" => lex::Token::Star,
        "->" => lex::Token::Arrow,

        "(" => lex::Token::OpenPar,
        ")" => lex::Token::ClosePar,

        "{" => lex::Token::OpenCurly,
        "}" => lex::Token::CloseCurly,
    }
}

// Nonterminals which are just thin wrappers over terminals, for testing the lexer itself:

pub RawName: String = {
    <Name>,
};

pub Whitespace: () = {
    () => (),
};
